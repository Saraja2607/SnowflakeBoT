def env='dev'
def app_name='snowflake'
def repo_name='SnowflakeBoT'
def snowsql_config="/home/ubuntu/.snowsql/config"

def branch_name='main'
def code_repo_name='https://github.com/Saraja2607/SnowflakeBoT.git' // SSH Repository of deploy repo //
def admin_repo='https://github.com/Saraja2607/sf_admin.git' //Admin Ansible repo here //

def jenkins_host="http://ec2-18-218-55-90.us-east-2.compute.amazonaws.com:8080/" 
def git_creds="saraja_git_creds"// GitHub credentials- Change ID as per Jenkins server https://jenkins_url/credentials/ //

def GIT_COMMIT // NO ACTION REQUIRED : For Git Commit ID assignment //
def LOG_READ // NO ACTION REQUIRED : For console log assignment //
def COMMIT_ONELINER  // NO ACTION REQUIRED : For Commit info assignment //


// Declarative Pipeline starts here //
pipeline {
    agent any
    // Stages begins here //
    stages {
        
        // Stage for Git Branches Checkout //
		  stage('Checkout Git Branch') {
			steps{
             git branch: "${branch_name}",
             url: "${code_repo_name}"
                    
             // Create Ansible admin directory and do a checkout from master //
             dir('CMT_CoP') {
             checkout([$class: 'GitSCM', 
             branches: [[name: '*/main']], 
             extensions: [], 
             userRemoteConfigs: [[url: "${admin_repo}"]]]) 
             }
            }
		  }
		  stage('Deploy') {
			steps {
				sh 'echo "This is my Deploy step"'
                script {                
                sh('''snowsql --dbname 'cmt_dev' --schemaname 'cmt_schema1' --config  '''+"${snowsql_config}"+''' -q 'select current_date' --connection sf_conn  2>&1''')
				FILES_CHANGED= sh(script: "set +x && git log -m -1 --name-only --diff-filter=ACM --pretty='format:' `git rev-parse HEAD` | sort -u | grep -i '.sql\$' > ${WORKSPACE}/committed_files.txt")
                sh("set +x && echo 'DEPLOYBEGIN' && echo '******Deploying from release/${env} Branch to ${app_name} ${env} Environment******'")
                sh("cat ${WORKSPACE}/committed_files.txt")
								
				sh('''
                set +x     
                echo "" > snow_sql_output.log
                echo "" > status
                git show --pretty=fuller ${GIT_COMMIT} | head -n 10 | tr -d '[:blank:]' | sed 's/commit/CommitID:/' | sed 's/</{/' | sed 's/>/}/' | sed 's/(//' | sed 's/)//' > git_details.txt     
                COMMIT_ONELINER=`sed s/"'"//g git_details.txt | xargs`
                cat git_details.txt
				
				while read -r file || [[ -n "$file" ]]
                do
                  statement_type=`echo "$file" |  cut -d / -f 1`
                  echo "statement_type: ${statement_type}, file: $file"
                  if [ ${statement_type} = "DDL" ]; then
                   database_name=`echo "$file" |  cut -d / -f 4`
                   database="${database_name}_'''+"${env}"+'''"
                   schema=`echo "$file" |  cut -d / -f 6`
                   exec_type=`echo "$file" |  cut -d / -f 7 | tr '[:lower:]' '[:upper:]'`
                   echo " Database: ${database}"
                   echo " Schema: ${schema}"
                   echo " File_path: ${file}"
                   echo " Executing sql file $(cat ${file})."
                   echo " Proceeding to create ${exec_type} in ${database} database and ${schema} schema.! " > ${WORKSPACE}/logs/${app_name}_${BUILD_NUMBER}.log
                   echo " Proceeding to create ${exec_type} in ${database} database and ${schema} schema.! " >> snow_sql_output.log
                   exec_sql=`snowsql --dbname ${database} --schemaname ${schema} --config '''+"${snowsql_config}"+''' --filename ${file} --connection sf_conn  2>&1`
                   echo " Snowsql execution ${exec_sql}"
                   echo "${exec_sql}" >> snow_sql_output.log
                  elif [ ${statement_type} = "release" ]; then
                   echo " File_path: ${file}"
                   echo " Executing release sql file $(cat ${file})."
                   ## echo " Proceeding to create release query.! " > ${WORKSPACE}/logs/${app_name}_${BUILD_NUMBER}.log
                   echo " Proceeding to create release query.!" >> snow_sql_output.log
                   exec_sql=`snowsql --config '''+"${snowsql_config}"+''' --filename ${file} --connection sf_conn 2>&1`
                   echo " Snowsql execution ${exec_sql}"
                   echo "${exec_sql}" >> snow_sql_output.log
                  
                  else
                   echo " File_path: ${file}"
                   echo " Executing  sql file $(cat ${file})."
                   echo " Proceeding to create .! " > ${WORKSPACE}/logs/${app_name}_${BUILD_NUMBER}.log
                   echo " Proceeding to create .!" >> snow_sql_output.log
                   exec_sql=`snowsql --config '''+"${snowsql_config}"+''' --filename ${file} --connection sf_conn 2>&1`
                   echo " Snowsql execution ${exec_sql}"
                   echo "${exec_sql}" >> snow_sql_output.log  
                  fi
				  
                  echo "***************************************************"
                done < ${WORKSPACE}/committed_files.txt
                echo "---------------------------------------"
                
                LOG_READ=$(cat snow_sql_output.log)
                
                if grep -q 'successfully' "snow_sql_output.log"; then
                  echo " All sql statements has been executed successfully"
                else
                  echo " One or more statement has failed to execute.!!"
                  fi
				                                                                                                                                                                                                                                                                                                                  
				''')
				sh("set +x && echo 'STAGEDONE'")
				}
			}
		  }
		}
		// Post action determines Success or Failure and send notifications //
		post {
			always {
				script {
					// Below "if condition" is for console log parsing //
					if (currentBuild.currentResult == "FAILURE") {
						 sh("set +x && echo 'STAGEDONE'")
					} else {
						 sh("set +x")
				}
			}
		}
	}
}